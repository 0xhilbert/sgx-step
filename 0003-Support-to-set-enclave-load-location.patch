diff --git a/common/inc/sgx_urts.h b/common/inc/sgx_urts.h
index ae1e10e..fbfc367 100644
--- a/common/inc/sgx_urts.h
+++ b/common/inc/sgx_urts.h
@@ -100,6 +100,7 @@ sgx_status_t SGXAPI sgx_destroy_enclave(const sgx_enclave_id_t enclave_id);
 void* SGXAPI sgx_get_aep(void);
 void  SGXAPI sgx_set_aep(void *aep);
 void* SGXAPI sgx_get_tcs(void);
+void  SGXAPI sgx_set_load_ptr(void *load_ptr);
 
 #ifdef __cplusplus
 }
diff --git a/psw/urts/linux/enclave_creator_hw.cpp b/psw/urts/linux/enclave_creator_hw.cpp
index ac934f4..d0664bc 100644
--- a/psw/urts/linux/enclave_creator_hw.cpp
+++ b/psw/urts/linux/enclave_creator_hw.cpp
@@ -53,6 +53,8 @@
   
 static EnclaveCreatorHW g_enclave_creator_hw;
 
+void* sgx_load_ptr = NULL;
+
 EnclaveCreator* g_enclave_creator = &g_enclave_creator_hw;
 static uint64_t g_eid = 0x1;
 
@@ -112,6 +114,11 @@ int EnclaveCreatorHW::error_driver2urts(int driver_error)
  
      return ret;
  }
+
+void sgx_set_load_ptr(void* load_ptr)
+{
+	sgx_load_ptr = load_ptr;
+}
  
 int EnclaveCreatorHW::create_enclave(secs_t *secs, sgx_enclave_id_t *enclave_id, void **start_addr, bool ae)
 {
@@ -126,7 +133,7 @@ int EnclaveCreatorHW::create_enclave(secs_t *secs, sgx_enclave_id_t *enclave_id,
 
     //SECS:BASEADDR must be naturally aligned on an SECS.SIZE boundary
     //This alignment is guaranteed by driver
-    void* enclave_base = mmap(NULL, (size_t)secs->size, PROT_NONE, MAP_SHARED, m_hdevice, 0);
+    void* enclave_base = mmap(sgx_load_ptr, (size_t)secs->size, PROT_NONE, MAP_SHARED, m_hdevice, 0);
     if(enclave_base == MAP_FAILED)
     {
         SE_TRACE(SE_TRACE_WARNING, "\ncreate enclave: mmap failed, errno = %d\n", errno);
diff --git a/psw/urts/linux/urts.lds b/psw/urts/linux/urts.lds
index 0918523..92a7905 100644
--- a/psw/urts/linux/urts.lds
+++ b/psw/urts/linux/urts.lds
@@ -3,6 +3,7 @@
         sgx_get_aep;
         sgx_set_aep;
         sgx_get_tcs;
+        sgx_set_load_ptr;
         sgx_create_enclave;
         sgx_create_enclave_ex;
         sgx_destroy_enclave;
diff --git a/sdk/simulation/uinst/u_instructions.cpp b/sdk/simulation/uinst/u_instructions.cpp
index 89364a9..3733b2a 100644
--- a/sdk/simulation/uinst/u_instructions.cpp
+++ b/sdk/simulation/uinst/u_instructions.cpp
@@ -57,6 +57,13 @@ static uintptr_t _ECREATE (page_info_t* pi);
 static uintptr_t _EADD (page_info_t* pi, void* epc_lin_addr);
 static uintptr_t _EREMOVE(const void* epc_lin_addr);
 
+void* sgx_load_ptr = NULL;
+
+void sgx_set_load_ptr(void* load_ptr)
+{
+	sgx_load_ptr = load_ptr;
+}
+
 ////////////////////////////////////////////////////////////////////////
 #define __GP__() exit(EXIT_FAILURE)
 
@@ -154,7 +161,7 @@ uintptr_t _ECREATE(page_info_t* pi)
 
     // `ce' is not checked against NULL, since it is not
     // allocated with new(std::no_throw).
-    addr = se_virtual_alloc(NULL, (size_t)secs->size, MEM_COMMIT);
+    addr = se_virtual_alloc(sgx_load_ptr, (size_t)secs->size, MEM_COMMIT);
     if (addr == NULL) {
         delete ce;
         return 0;

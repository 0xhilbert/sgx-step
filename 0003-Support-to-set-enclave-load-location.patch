diff --git a/common/inc/sgx_urts.h b/common/inc/sgx_urts.h
index 9e84078..669ef2e 100644
--- a/common/inc/sgx_urts.h
+++ b/common/inc/sgx_urts.h
@@ -61,6 +61,7 @@ sgx_status_t SGXAPI sgx_destroy_enclave(const sgx_enclave_id_t enclave_id);
 void* SGXAPI sgx_get_aep(void);
 void  SGXAPI sgx_set_aep(void *aep);
 void* SGXAPI sgx_get_tcs(void);
+void  SGXAPI sgx_set_load_ptr(void *load_ptr);
 
 #ifdef __cplusplus
 }
diff --git a/psw/urts/linux/enclave_creator_hw.cpp b/psw/urts/linux/enclave_creator_hw.cpp
index 48482ef..634d6f2 100644
--- a/psw/urts/linux/enclave_creator_hw.cpp
+++ b/psw/urts/linux/enclave_creator_hw.cpp
@@ -57,6 +57,8 @@
 
 static EnclaveCreatorHW g_enclave_creator_hw;
 
+void* sgx_load_ptr = NULL;
+
 EnclaveCreator* g_enclave_creator = &g_enclave_creator_hw;
 static uint64_t g_eid = 0x1;
 
@@ -116,6 +118,11 @@ int EnclaveCreatorHW::error_driver2urts(int driver_error)
  
      return ret;
  }
+
+void sgx_set_load_ptr(void* load_ptr)
+{
+	sgx_load_ptr = load_ptr;
+}
  
 int EnclaveCreatorHW::create_enclave(secs_t *secs, sgx_enclave_id_t *enclave_id, void **start_addr, bool ae)
 {
@@ -130,7 +137,7 @@ int EnclaveCreatorHW::create_enclave(secs_t *secs, sgx_enclave_id_t *enclave_id,
 
     //SECS:BASEADDR must be naturally aligned on an SECS.SIZE boundary
     //This alignment is guaranteed by driver
-    void* enclave_base = mmap(NULL, (size_t)secs->size, PROT_NONE, MAP_SHARED, m_hdevice, 0);
+    void* enclave_base = mmap(sgx_load_ptr, (size_t)secs->size, PROT_NONE, MAP_SHARED, m_hdevice, 0);
     if(enclave_base == MAP_FAILED)
     {
         SE_TRACE(SE_TRACE_WARNING, "\ncreate enclave: mmap failed, errno = %d\n", errno);
diff --git a/psw/urts/linux/urts.lds b/psw/urts/linux/urts.lds
index bad727e..fd8fa6b 100644
--- a/psw/urts/linux/urts.lds
+++ b/psw/urts/linux/urts.lds
@@ -3,6 +3,7 @@
         sgx_get_aep;
         sgx_set_aep;
         sgx_get_tcs;
+        sgx_set_load_ptr;
         sgx_create_enclave;
         sgx_destroy_enclave;
         sgx_ecall;

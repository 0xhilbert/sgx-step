From b26ef2c0859c32cb3d1687f52dc0607fb041a52c Mon Sep 17 00:00:00 2001
From: Jo Van Bulck <jo.vanbulck@cs.kuleuven.be>
Date: Tue, 16 Jan 2018 11:47:08 +0100
Subject: [PATCH 2/6] Add support to retrieve most recently used TCS pointer.

---
 common/inc/sgx_urts.h                |  2 ++
 psw/urts/linux/enter_enclave.S       | 20 ++++++++++++++++++++
 psw/urts/linux/urts.cpp              |  6 ++++++
 psw/urts/linux/urts.lds              |  1 +
 sdk/simulation/urtssim/urts_deploy.c |  6 ++++++
 5 files changed, 35 insertions(+)

diff --git a/common/inc/sgx_urts.h b/common/inc/sgx_urts.h
index 82dbe29..ae1e10e 100644
--- a/common/inc/sgx_urts.h
+++ b/common/inc/sgx_urts.h
@@ -96,8 +96,10 @@ sgx_status_t SGXAPI sgx_create_encrypted_enclave(
 
 sgx_status_t SGXAPI sgx_destroy_enclave(const sgx_enclave_id_t enclave_id);
 
+//XXX
 void* SGXAPI sgx_get_aep(void);
 void  SGXAPI sgx_set_aep(void *aep);
+void* SGXAPI sgx_get_tcs(void);
 
 #ifdef __cplusplus
 }
diff --git a/psw/urts/linux/enter_enclave.S b/psw/urts/linux/enter_enclave.S
index 2b17fac..ff992b6 100644
--- a/psw/urts/linux/enter_enclave.S
+++ b/psw/urts/linux/enter_enclave.S
@@ -43,6 +43,19 @@ g_aep_pointer:
     .word 0x0
     .word 0x0
 
+/* XXX HACK: SGX stores TCS address in rbx on interrupt, but this value is
+ * somehow not properly stored in Linux's pt_regs struct available to our
+ * driver's interrupt handler. We therefore store TCS address here in the
+ * untrusted runtime, so as to be able to explicitly communicate TCS to our
+ * driver...
+ */
+    .data
+g_tcs:
+    .word 0x0
+    .word 0x0
+    .word 0x0
+    .word 0x0
+
 /* int __morestack(const tcs_t *tcs, const int fn, const void *ocall_table, const void *ms, CTrustThread *trust_thread); */
 .file "enter_enclave.S"
 .data
@@ -83,6 +96,8 @@ EENTER_PROLOG
     vzeroupper
 1:
     mov         frame_arg0, %xbx                /* tcs addr */
+    lea_pic     g_tcs, %xax
+    mov         %xbx, (%xax)
     /* fetch AEP; init when NULL */
     lea_pic     g_aep_pointer, %xax
     mov         (%xax), %xcx                    /* aep addr */
@@ -165,6 +180,11 @@ DECLARE_GLOBAL_FUNC set_aep
     mov         %xbx, (%xax)
     ret
 
+DECLARE_GLOBAL_FUNC get_tcs
+    lea_pic     g_tcs, %xax
+    mov         (%xax), %xax
+    ret
+
 DECLARE_GLOBAL_FUNC get_eenterp
     lea_pic .Leenter_inst, %xax
     ret
diff --git a/psw/urts/linux/urts.cpp b/psw/urts/linux/urts.cpp
index f39a1cd..f41a0cb 100644
--- a/psw/urts/linux/urts.cpp
+++ b/psw/urts/linux/urts.cpp
@@ -149,12 +149,18 @@ sgx_create_encrypted_enclave(
 //XXX
 extern "C" void *get_aep();
 extern "C" void  set_aep(void *aep);
+extern "C" void *get_tcs();
 
 extern "C" void* sgx_get_aep(void)
 {
     return get_aep();
 }
 
+extern "C" void* sgx_get_tcs(void)
+{
+    return get_tcs();
+}
+
 extern "C" void sgx_set_aep(void *aep)
 {
     set_aep(aep);
diff --git a/psw/urts/linux/urts.lds b/psw/urts/linux/urts.lds
index 6bcd6b9..0918523 100644
--- a/psw/urts/linux/urts.lds
+++ b/psw/urts/linux/urts.lds
@@ -2,6 +2,7 @@
     global:
         sgx_get_aep;
         sgx_set_aep;
+        sgx_get_tcs;
         sgx_create_enclave;
         sgx_create_enclave_ex;
         sgx_destroy_enclave;
diff --git a/sdk/simulation/urtssim/urts_deploy.c b/sdk/simulation/urtssim/urts_deploy.c
index 42cbad4..32aa26a 100644
--- a/sdk/simulation/urtssim/urts_deploy.c
+++ b/sdk/simulation/urtssim/urts_deploy.c
@@ -67,6 +67,12 @@ void sgx_set_aep(void* p)
     printf("Please use the correct uRTS library from PSW package.\n");
 }
 
+void *sgx_get_tcs(void)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+    return NULL;
+}
+
 void sgx_debug_load_state_add_element(){};
 void sgx_debug_unload_state_remove_element(){};
 void sgx_destroy_enclave(){};

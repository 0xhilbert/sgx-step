From 11942c0b1244b28b8f1a2df0966c9fe08ca850de Mon Sep 17 00:00:00 2001
From: Jo Van Bulck <jo.vanbulck@cs.kuleuven.be>
Date: Thu, 27 Jul 2017 21:02:10 +0200
Subject: [PATCH 1/2] Support to reconfigure Asynchronous Exit Pointer (AEP) at
 runtime.

This provides a convenient way for an untrusted enclave execution environment
(OS + containing process) to determine whether or not the enclave has been
interrupted, and can be used to execute arbitrary code before ERESUME-ing a
previously interrupted enclave.
---
 common/inc/sgx_urts.h                |  3 +++
 psw/urts/linux/enter_enclave.S       | 31 +++++++++++++++++++++++++------
 psw/urts/linux/urts.cpp              | 14 ++++++++++++++
 psw/urts/linux/urts.lds              |  2 ++
 sdk/simulation/urtssim/urts_deploy.c | 11 +++++++++++
 5 files changed, 55 insertions(+), 6 deletions(-)

diff --git a/common/inc/sgx_urts.h b/common/inc/sgx_urts.h
index f90a2d0..687e7e6 100644
--- a/common/inc/sgx_urts.h
+++ b/common/inc/sgx_urts.h
@@ -57,6 +57,9 @@ sgx_status_t SGXAPI sgx_create_enclave(const char *file_name, const int debug, s
 
 sgx_status_t SGXAPI sgx_destroy_enclave(const sgx_enclave_id_t enclave_id);
 
+void* SGXAPI sgx_get_aep(void);
+void  SGXAPI sgx_set_aep(void *aep);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/psw/urts/linux/enter_enclave.S b/psw/urts/linux/enter_enclave.S
--- a/psw/urts/linux/enter_enclave.S
+++ b/psw/urts/linux/enter_enclave.S
@@ -32,6 +32,16 @@
 
 #include "enter_enclave.h"
 
+/* XXX runtime reconfigurable indirect Asynchronous Exit Pointer (AEP)
+ * (ld complains when initializing __default_async_exit_pointer here, so we have
+ * to do it at runtime, when EENTERing, below in .Ldo_eenter.
+ */
+    .data
+g_aep_pointer:
+    .word 0x0
+    .word 0x0
+    .word 0x0
+    .word 0x0
 
 /* int __morestack(const tcs_t *tcs, const int fn, const void *ocall_table, const void *ms, CTrustThread *trust_thread); */
 .file "enter_enclave.S"
@@ -48,9 +58,15 @@ EENTER_PROLOG
     mov frame_arg3, %xsi                        /* ms */
 
 .Ldo_eenter:
-    mov frame_arg0, %xbx                        /* tcs addr */
-    lea_pic .Lasync_exit_pointer, %xcx          /* aep addr */
-    mov $SE_EENTER, %xax                        /* EENTER leaf */
+    mov         frame_arg0, %xbx                /* tcs addr */
+    /* fetch AEP; init when NULL */
+    lea_pic     g_aep_pointer, %xax
+    mov         (%xax), %xcx                    /* aep addr */
+    cmp         $0x0, %xcx
+    jnz 1f
+    lea_pic     __default_async_exit_pointer, %xcx
+    mov         %xcx, (%xax)
+1:  mov         $SE_EENTER, %xax                /* EENTER leaf */
 
 .Leenter_inst:
     ENCLU
@@ -107,14 +123,20 @@ EENTER_PROLOG
 .Loret:
     EENTER_EPILOG
 
-.Lasync_exit_pointer:
+__default_async_exit_pointer:
     ENCLU
 
 .size __morestack, .-__morestack
 
 
-DECLARE_GLOBAL_FUNC get_aep
-    lea_pic     .Lasync_exit_pointer, %xax
+ DECLARE_GLOBAL_FUNC get_aep
+    lea_pic     g_aep_pointer, %xax
+    mov         (%xax), %xax
+    ret
+ 
+DECLARE_GLOBAL_FUNC set_aep
+    lea_pic     g_aep_pointer, %xax
+    mov         naked_arg0, (%xax)
     ret
 
 DECLARE_GLOBAL_FUNC get_eenterp
diff --git a/psw/urts/linux/urts.cpp b/psw/urts/linux/urts.cpp
--- a/psw/urts/linux/urts.cpp
+++ b/psw/urts/linux/urts.cpp
@@ -70,3 +70,17 @@ extern "C" sgx_status_t sgx_create_enclave(const char *file_name, const int debu
 
     return ret;
 }
+
+//XXX
+extern "C" void *get_aep();
+extern "C" void  set_aep(void *aep);
+
+extern "C" void* sgx_get_aep(void)
+{
+    return get_aep();
+}
+
+extern "C" void sgx_set_aep(void *aep)
+{
+    set_aep(aep);
+}
diff --git a/psw/urts/linux/urts.lds b/psw/urts/linux/urts.lds
--- a/psw/urts/linux/urts.lds
+++ b/psw/urts/linux/urts.lds
@@ -1,5 +1,7 @@
 {
     global:
+        sgx_get_aep;
+        sgx_set_aep;
         sgx_create_enclave;
         sgx_destroy_enclave;
         sgx_ecall;
diff --git a/sdk/simulation/urtssim/urts_deploy.c b/sdk/simulation/urtssim/urts_deploy.c
--- a/sdk/simulation/urtssim/urts_deploy.c
+++ b/sdk/simulation/urtssim/urts_deploy.c
@@ -38,6 +38,17 @@ sgx_status_t sgx_create_enclave()
     return SGX_ERROR_UNEXPECTED;
 }
 
+void *sgx_get_aep(void)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+    return NULL;
+}
+
+void sgx_set_aep(void* p)
+{
+    printf("Please use the correct uRTS library from PSW package.\n");
+}
+
 void sgx_debug_load_state_add_element(){};
 void sgx_debug_unload_state_remove_element(){};
 void sgx_destroy_enclave(){};
-- 
2.5.0

